// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser, formDataBodySerializer } from '@hey-api/client-fetch';
import type { GetSpellCheckData, GetSpellCheckError, GetSpellCheckResponse, GetProfanityData, GetProfanityError, GetProfanityResponse, GetNsfwData, GetNsfwError, GetNsfwResponse, GetValidateEmailData, GetValidateEmailError, GetValidateEmailResponse, PostSpamcheckData, PostSpamcheckError, PostSpamcheckResponse, GetSearchData, GetSearchError, GetSearchResponse, GetSearchSuggestData, GetSearchSuggestError, GetSearchSuggestResponse, GetDnsData, GetDnsError, GetDnsResponse, PostHtmlToAnyData, PostHtmlToAnyError, PostHtmlToAnyResponse, PostScrapeData, PostScrapeError, PostScrapeResponse, PostAiScrapeData, PostAiScrapeError, PostAiScrapeResponse, PostStoreKvData, PostStoreKvError, PostStoreKvResponse, GetStoreKv39Jd883Data, GetStoreKv39Jd883Error, GetStoreKv39Jd883Response, DeleteFileHelloData, DeleteFileHelloError, DeleteFileHelloResponse, PostStoreFileData, PostStoreFileError, PostStoreFileResponse, GetStoreFileByKeyData, GetStoreFileByKeyError, GetStoreFileByKeyResponse, PostObjectDetectionData, PostObjectDetectionError, PostObjectDetectionResponse, PostData, PostError, PostResponse, GetGeoCityData, GetGeoCityError, GetGeoCityResponse, GetGeoCountryData, GetGeoCountryError, GetGeoCountryResponse, GetGeoStateData, GetGeoStateError, GetGeoStateResponse, GetGeoDistanceData, GetGeoDistanceError, GetGeoDistanceResponse, GetGeoTimezoneData, GetGeoTimezoneError, GetGeoTimezoneResponse, GetGeoGeohashData, GetGeoGeohashError, GetGeoGeohashResponse, GetGeoGeohashDecodeS1Jsf8YpfData, GetGeoGeohashDecodeS1Jsf8YpfError, GetGeoGeohashDecodeS1Jsf8YpfResponse, GetGeoSearchData, GetGeoSearchError, GetGeoSearchResponse, GetGeoGeocodeData, GetGeoGeocodeError, GetGeoGeocodeResponse, PostTranscribeData, PostTranscribeError, PostTranscribeResponse, PostTtsData, PostTtsError, PostTtsResponse, GetTtsData, GetTtsError, GetTtsResponse, PostPromptEngineData, PostPromptEngineError, PostPromptEngineResponse, GetPromptEngineData, GetPromptEngineError, GetPromptEngineResponse, PostPromptEngineB295D777089248E1A5F6A9Ae91E9D28AData, PostPromptEngineB295D777089248E1A5F6A9Ae91E9D28AError, PostPromptEngineB295D777089248E1A5F6A9Ae91E9D28AResponse, DeletePromptEngineDc578C696Eb54C5B82Ab9F74077Cfdd5Data, DeletePromptEngineDc578C696Eb54C5B82Ab9F74077Cfdd5Error, DeletePromptEngineDc578C696Eb54C5B82Ab9F74077Cfdd5Response, PostRunData, PostRunError, PostRunResponse, GetDc578C696Eb54C5B82Ab9F74077Cfdd5Data, GetDc578C696Eb54C5B82Ab9F74077Cfdd5Error, GetDc578C696Eb54C5B82Ab9F74077Cfdd5Response, PostApiV1PromptEngineStreamingData, PostApiV1PromptEngineStreamingError, PostApiV1PromptEngineStreamingResponse, PostSummaryData, PostSummaryError, PostSummaryResponse, PostSentimentData, PostSentimentError, PostSentimentResponse, PostTranslateData, PostTranslateError, PostTranslateResponse, PostSqlData, PostSqlError, PostSqlResponse, PostImageGenerationData, PostImageGenerationError, PostImageGenerationResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Spell Check
 */
export const getSpellCheck = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetSpellCheckData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSpellCheckResponse, GetSpellCheckError, ThrowOnError>({
        ...options,
        url: '/spell_check'
    });
};

/**
 * Profanity
 */
export const getProfanity = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetProfanityData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetProfanityResponse, GetProfanityError, ThrowOnError>({
        ...options,
        url: '/profanity'
    });
};

/**
 * NSFW
 */
export const getNsfw = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetNsfwData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNsfwResponse, GetNsfwError, ThrowOnError>({
        ...options,
        url: '/nsfw'
    });
};

/**
 * Email
 */
export const getValidateEmail = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetValidateEmailData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetValidateEmailResponse, GetValidateEmailError, ThrowOnError>({
        ...options,
        url: '/validate/email'
    });
};

/**
 * Spam Check
 */
export const postSpamcheck = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<PostSpamcheckData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostSpamcheckResponse, PostSpamcheckError, ThrowOnError>({
        ...options,
        url: '/spamcheck'
    });
};

/**
 * AI Search
 */
export const getSearch = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetSearchData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSearchResponse, GetSearchError, ThrowOnError>({
        ...options,
        url: '/search'
    });
};

/**
 * Search Suggestion
 */
export const getSearchSuggest = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetSearchSuggestData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSearchSuggestResponse, GetSearchSuggestError, ThrowOnError>({
        ...options,
        url: '/search/suggest'
    });
};

/**
 * DNS
 */
export const getDns = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetDnsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetDnsResponse, GetDnsError, ThrowOnError>({
        ...options,
        url: '/dns'
    });
};

/**
 * HTML To Any
 */
export const postHtmlToAny = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<PostHtmlToAnyData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostHtmlToAnyResponse, PostHtmlToAnyError, ThrowOnError>({
        ...options,
        url: '/html_to_any'
    });
};

/**
 * Scrape
 */
export const postScrape = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<PostScrapeData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostScrapeResponse, PostScrapeError, ThrowOnError>({
        ...options,
        url: '/scrape'
    });
};

/**
 * AI Scraper
 */
export const postAiScrape = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<PostAiScrapeData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostAiScrapeResponse, PostAiScrapeError, ThrowOnError>({
        ...options,
        url: '/ai/scrape'
    });
};

/**
 * Add
 */
export const postStoreKv = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<PostStoreKvData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostStoreKvResponse, PostStoreKvError, ThrowOnError>({
        ...options,
        url: '/store/kv'
    });
};

/**
 * Get
 */
export const getStoreKv39Jd883 = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetStoreKv39Jd883Data, ThrowOnError>) => {
    return (options?.client ?? client).get<GetStoreKv39Jd883Response, GetStoreKv39Jd883Error, ThrowOnError>({
        ...options,
        url: '/store/kv/39jd883'
    });
};

/**
 * Delete
 */
export const deleteFileHello = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<DeleteFileHelloData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteFileHelloResponse, DeleteFileHelloError, ThrowOnError>({
        ...options,
        url: '/file/hello'
    });
};

/**
 * Upload
 */
export const postStoreFile = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<PostStoreFileData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostStoreFileResponse, PostStoreFileError, ThrowOnError>({
        ...options,
        ...formDataBodySerializer,
        headers: {
            'Content-Type': null,
            ...options?.headers
        },
        url: '/store/file'
    });
};

/**
 * Retrieve
 */
export const getStoreFileByKey = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetStoreFileByKeyData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetStoreFileByKeyResponse, GetStoreFileByKeyError, ThrowOnError>({
        ...options,
        url: '/store/file/{key}'
    });
};

/**
 * Object Detection
 */
export const postObjectDetection = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<PostObjectDetectionData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostObjectDetectionResponse, PostObjectDetectionError, ThrowOnError>({
        ...options,
        url: '/object_detection'
    });
};

/**
 * VOCR
 */
export const post = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<PostData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostResponse, PostError, ThrowOnError>({
        ...options,
        url: '/'
    });
};

/**
 * City
 */
export const getGeoCity = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetGeoCityData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetGeoCityResponse, GetGeoCityError, ThrowOnError>({
        ...options,
        url: '/geo/city'
    });
};

/**
 * Country
 */
export const getGeoCountry = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetGeoCountryData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetGeoCountryResponse, GetGeoCountryError, ThrowOnError>({
        ...options,
        url: '/geo/country'
    });
};

/**
 * State
 */
export const getGeoState = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetGeoStateData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetGeoStateResponse, GetGeoStateError, ThrowOnError>({
        ...options,
        url: '/geo/state'
    });
};

/**
 * Distance
 */
export const getGeoDistance = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetGeoDistanceData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetGeoDistanceResponse, GetGeoDistanceError, ThrowOnError>({
        ...options,
        url: '/geo/distance'
    });
};

/**
 * Timezone
 */
export const getGeoTimezone = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetGeoTimezoneData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetGeoTimezoneResponse, GetGeoTimezoneError, ThrowOnError>({
        ...options,
        url: '/geo/timezone'
    });
};

/**
 * Decode Geohash
 */
export const getGeoGeohash = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetGeoGeohashData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetGeoGeohashResponse, GetGeoGeohashError, ThrowOnError>({
        ...options,
        url: '/geo/geohash'
    });
};

/**
 * Decode
 */
export const getGeoGeohashDecodeS1Jsf8Ypf = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetGeoGeohashDecodeS1Jsf8YpfData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetGeoGeohashDecodeS1Jsf8YpfResponse, GetGeoGeohashDecodeS1Jsf8YpfError, ThrowOnError>({
        ...options,
        url: '/geo/geohash/decode/s1jsf8ypf'
    });
};

/**
 * Search
 */
export const getGeoSearch = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetGeoSearchData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetGeoSearchResponse, GetGeoSearchError, ThrowOnError>({
        ...options,
        url: '/geo/search'
    });
};

/**
 * Geocode
 */
export const getGeoGeocode = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetGeoGeocodeData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetGeoGeocodeResponse, GetGeoGeocodeError, ThrowOnError>({
        ...options,
        url: '/geo/geocode'
    });
};

/**
 * Speech to Text
 */
export const postTranscribe = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<PostTranscribeData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTranscribeResponse, PostTranscribeError, ThrowOnError>({
        ...options,
        url: '/transcribe'
    });
};

/**
 * Text to Speech
 */
export const postTts = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<PostTtsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTtsResponse, PostTtsError, ThrowOnError>({
        ...options,
        url: '/tts'
    });
};

/**
 * Speaker Voice Accents
 */
export const getTts = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetTtsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTtsResponse, GetTtsError, ThrowOnError>({
        ...options,
        url: '/tts'
    });
};

/**
 * Create Prompt
 */
export const postPromptEngine = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<PostPromptEngineData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostPromptEngineResponse, PostPromptEngineError, ThrowOnError>({
        ...options,
        url: '/prompt_engine/'
    });
};

/**
 * List Prompts
 */
export const getPromptEngine = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetPromptEngineData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPromptEngineResponse, GetPromptEngineError, ThrowOnError>({
        ...options,
        url: '/prompt_engine'
    });
};

/**
 * Run Prompt
 */
export const postPromptEngineB295D777089248E1A5F6A9Ae91E9D28A = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<PostPromptEngineB295D777089248E1A5F6A9Ae91E9D28AData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostPromptEngineB295D777089248E1A5F6A9Ae91E9D28AResponse, PostPromptEngineB295D777089248E1A5F6A9Ae91E9D28AError, ThrowOnError>({
        ...options,
        url: '/prompt_engine/b295d777-0892-48e1-a5f6-a9ae91e9d28a'
    });
};

/**
 * Delete a Prompt
 */
export const deletePromptEngineDc578C696Eb54C5b82Ab9F74077Cfdd5 = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<DeletePromptEngineDc578C696Eb54C5B82Ab9F74077Cfdd5Data, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeletePromptEngineDc578C696Eb54C5B82Ab9F74077Cfdd5Response, DeletePromptEngineDc578C696Eb54C5B82Ab9F74077Cfdd5Error, ThrowOnError>({
        ...options,
        url: '/prompt_engine/dc578c69-6eb5-4c5b-82ab-9f74077cfdd5'
    });
};

/**
 * Run Prompt Direct
 */
export const postRun = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<PostRunData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostRunResponse, PostRunError, ThrowOnError>({
        ...options,
        url: '/run'
    });
};

/**
 * Get Prompt
 */
export const getDc578C696Eb54C5b82Ab9F74077Cfdd5 = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetDc578C696Eb54C5B82Ab9F74077Cfdd5Data, ThrowOnError>) => {
    return (options?.client ?? client).get<GetDc578C696Eb54C5B82Ab9F74077Cfdd5Response, GetDc578C696Eb54C5B82Ab9F74077Cfdd5Error, ThrowOnError>({
        ...options,
        url: '/dc578c69-6eb5-4c5b-82ab-9f74077cfdd5'
    });
};

/**
 * Streaming
 */
export const postApiV1PromptEngineStreaming = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<PostApiV1PromptEngineStreamingData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiV1PromptEngineStreamingResponse, PostApiV1PromptEngineStreamingError, ThrowOnError>({
        ...options,
        url: '/api/v1/prompt_engine/streaming'
    });
};

/**
 * Summary
 */
export const postSummary = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<PostSummaryData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostSummaryResponse, PostSummaryError, ThrowOnError>({
        ...options,
        url: '/summary'
    });
};

/**
 * Sentiment
 */
export const postSentiment = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<PostSentimentData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostSentimentResponse, PostSentimentError, ThrowOnError>({
        ...options,
        url: '/sentiment'
    });
};

/**
 * Translate
 */
export const postTranslate = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<PostTranslateData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTranslateResponse, PostTranslateError, ThrowOnError>({
        ...options,
        url: '/translate'
    });
};

/**
 * Text to SQL
 */
export const postSql = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<PostSqlData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostSqlResponse, PostSqlError, ThrowOnError>({
        ...options,
        url: '/sql'
    });
};

/**
 * Image Generation
 */
export const postImageGeneration = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<PostImageGenerationData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostImageGenerationResponse, PostImageGenerationError, ThrowOnError>({
        ...options,
        url: '/image_generation'
    });
};